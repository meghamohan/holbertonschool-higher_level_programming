``7-base_geometry`` module
======================


Import BaseGeometry class from `7-base_geometry` module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Test all the functionalities:

    >>> test1 = BaseGeometry()
    >>> type(test1)
    <class '7-base_geometry.BaseGeometry'>

    >>> 'area' in dir(BaseGeometry)
    True

    >>> 'integer_validator' in dir(BaseGeometry)
    True

    >>> test1.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

    >>> test1.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> test1.integer_validator(1)
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> test1.integer_validator(1, 2, 3)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

    >>> test1.integer_validator("holberton", -8)
    Traceback (most recent call last):
    ValueError: holberton must be greater than 0

    >>> test1.integer_validator("holberton", 0)
    Traceback (most recent call last):
    ValueError: holberton must be greater than 0

    >>> test1.integer_validator("holberton", 1)

    >>> test1.integer_validator("age", (4,))
    Traceback (most recent call last):
    TypeError: age must be an integer

    >>> test1.integer_validator("age", True)
    Traceback (most recent call last):
    TypeError: age must be an integer

    >>> test1.integer_validator("age", [3])
    Traceback (most recent call last):
    TypeError: age must be an integer
